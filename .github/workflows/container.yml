name: Build and Push Container

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: abn/mcpdoc-daemon

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ matrix.arch }}-${{ github.sha }}
            ${{ startsWith(github.ref, 'refs/tags/') && format('{0}-{1}', matrix.arch, github.ref_name) || '' }}
          containerfiles: ./Containerfile
          platforms: linux/${{ matrix.arch }}

      - name: Push container image
        if: github.event_name != 'pull_request'
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.REGISTRY }}

  create-manifest:
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Log in to Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push multi-arch manifest
        run: |
          # Determine which architecture tags to use
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tagged releases, use the version-tagged architecture images
            TAG_NAME="${{ github.ref_name }}"
            AMD64_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${TAG_NAME}"
            ARM64_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${TAG_NAME}"
          else
            # For other builds, use SHA-tagged architecture images
            AMD64_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ github.sha }}"
            ARM64_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ github.sha }}"
          fi

          # Create manifest list for each tag
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr '\n' ' '); do
            echo "Creating manifest for tag: $tag"
            echo "Using AMD64 image: $AMD64_TAG"
            echo "Using ARM64 image: $ARM64_TAG"
            podman manifest create $tag
            podman manifest add $tag $AMD64_TAG
            podman manifest add $tag $ARM64_TAG
            podman manifest push $tag
          done

      - name: Get image digest
        id: digest
        run: |
          # Get digest from the latest tag (first in the list)
          LATEST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          DIGEST=$(podman manifest inspect $LATEST_TAG | jq -r '.digest')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true
